# SiteGuard API Backend Configuration with SSL
upstream siteguard_media_server {
    server 127.0.0.1:3001;
}

upstream siteguard_media_http {
    server 127.0.0.1:8000;
}

upstream siteguard_onvif_server {
    server 127.0.0.1:3002;
}

upstream siteguard_network_server {
    server 127.0.0.1:3003;
}

upstream siteguard_security_server {
    server 127.0.0.1:3004;
}

# HTTP server (redirects to HTTPS)
server {
    listen 80;
    server_name api.aiconstructpro.com;

    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name api.aiconstructpro.com;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/api.aiconstructpro.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.aiconstructpro.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Dynamic CORS handling for multiple origins
    set $cors_origin "";
    if ($http_origin ~* "^https://(aiconstructpro\.com|www\.aiconstructpro\.com|preview--ai-construct-pro\.lovable\.app|preview--project-ai-construct\.lovable\.app|.*\.lovableproject\.com)$") {
        set $cors_origin $http_origin;
    }
    if ($http_origin ~* "^http://(localhost:5173|localhost:3000)$") {
        set $cors_origin $http_origin;
    }

    # CORS headers for all requests
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, X-API-Key" always;
    add_header Access-Control-Allow-Credentials "true" always;
    add_header Access-Control-Max-Age "86400" always;

    # Handle preflight requests
    location / {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, X-API-Key" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age "86400" always;
            add_header Content-Type text/plain;
            add_header Content-Length 0;
            return 204;
        }

        return 404;
    }

    # V380 API - Handle /api/media/api/v380 routes
    location ~ ^/api/media/api/v380/?(.*)$ {
        proxy_pass http://siteguard_media_server/api/v380/$1;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Media Server API - Handle /api/streams and /api/media (excluding v380)
    location ~ ^/api/(streams|media)/?(.*)$ {
        proxy_pass http://siteguard_media_server/api/$1/$2;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # HLS Streaming Support - Route to Node Media Server HTTP port
    location ~ ^/live/(.+)\.m3u8$ {
        proxy_pass http://siteguard_media_http/live/$1.m3u8;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Cache-Control no-cache;
        add_header Access-Control-Allow-Origin "*";
    }

    # HLS Segment Support - Route to Node Media Server HTTP port
    location ~ ^/live/(.+)\.ts$ {
        proxy_pass http://siteguard_media_http/live/$1.ts;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Cache-Control "max-age=10";
        add_header Access-Control-Allow-Origin "*";
    }

    # ONVIF Server API
    location /api/onvif/ {
        proxy_pass http://siteguard_onvif_server/api/onvif/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Network Server API
    location /api/network/ {
        proxy_pass http://siteguard_network_server/api/network/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Security Server API
    location /api/security/ {
        proxy_pass http://siteguard_security_server/api/security/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # WebSocket support for all services
    location /socket.io/ {
        proxy_pass http://siteguard_security_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Recordings (protected endpoint)
    location /recordings/ {
        alias /opt/siteguard/recordings/;
        expires 1h;
    }
}
